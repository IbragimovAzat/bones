from PIL import Image
# from scipy.spatial import ConvexHull
import cv2
from matplotlib import image
from matplotlib import pyplot as plt
from ultralytics import YOLO
import random
import os
import shutil
from matplotlib import image as mpimg
import numpy as np
import math
import random
import tensorflow as tf


class KernelLinePresenter:

    def show_image_with_points(image_path, points):
        """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ —Ç–æ—á–∫–∞–º–∏.

        :param image_path: –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é.
        :param points: –°–ø–∏—Å–æ–∫ —Ç–æ—á–µ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ [[x1, y1], [x2, y2], ...].
        """
        image = cv2.imread(image_path)
        if image is None:
            print("–û—à–∏–±–∫–∞: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        for point in points:
            cv2.circle(image, tuple(point), 25,
                       (0, 0, 255), -1)  # –ö—Ä–∞—Å–Ω—ã–µ —Ç–æ—á–∫–∏

        cv2.namedWindow("Image", cv2.WINDOW_NORMAL)
        while True:
            cv2.imshow("Image", image)
            if cv2.waitKey(1) & 0xFF == ord('q'):
                break

        cv2.destroyAllWindows()

    # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    # points = [[686, 1542], [921, 3577]]  # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–æ—á–µ–∫
    # show_image_with_points("./BedroImages/bedro 6.jpg", points)

    def getBounds(imageName):
        model = YOLO('static/neuralModels/golen.pt')
        output = []
        results = model.predict(imageName, save=False,
                                save_txt=False, save_conf=False)
        for result in results:
            for box in result.masks.xy:
                output.append(box.tolist())
        output.sort(key=lambda point: (point[0], point[1]))

        return output

    def getPercentHeight(topPoint, bottomPoint):
        """
        –ü–æ–ª—É—á–∞–µ—Ç –æ—Ç—Å—Ç—É–ø –¥–ª—è –∫–æ—Å—Ç–∏
        :param topPoint:
        :param bottomPoint:
        :return:
        """
        return abs(topPoint[1] - bottomPoint[1])*0.15

    def getCenterPointsOfContour(points, topPoint, bottomPoint, margin, step=5):
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–æ—Å—Ç–∏ –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–º —Å—Ä–µ–∑–∞–º.
        :param points: —Å–ø–∏—Å–æ–∫ —Ç–æ—á–µ–∫ –∫–æ–Ω—Ç—É—Ä–∞ (—Å–ø–∏—Å–æ–∫ [x, y])
        :param topPoint: –≤–µ—Ä—Ö–Ω—è—è —Ç–æ—á–∫–∞ –æ–±–ª–∞—Å—Ç–∏
        :param bottomPoint: –Ω–∏–∂–Ω—è—è —Ç–æ—á–∫–∞ –æ–±–ª–∞—Å—Ç–∏
        :param margin: –æ—Ç—Å—Ç—É–ø –æ—Ç –∫—Ä–∞—ë–≤
        :param step: —à–∞–≥ –ø–æ –æ—Å–∏ Y
        :return: —Å–ø–∏—Å–æ–∫ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã—Ö —Ç–æ—á–µ–∫, —Å–ø–∏—Å–æ–∫ Y-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        """
        points = np.array(points)
        contourPoints = []
        yContourPoints = []

        minY = int(topPoint[1] + margin)
        maxY = int(bottomPoint[1] - margin)

        for y in range(minY, maxY, step):
            close_points = points[np.abs(points[:, 1] - y) < step]
            print(f"Y={y}, close_points={len(close_points)}")  # –æ—Ç–ª–∞–¥–∫–∞

            if len(close_points) >= 2:
                leftmost = close_points[np.argmin(close_points[:, 0])]
                rightmost = close_points[np.argmax(close_points[:, 0])]
                width = abs(rightmost[0] - leftmost[0])
                # –æ—Ç–ª–∞–¥–∫–∞
                print(
                    f"  Leftmost={leftmost}, Rightmost={rightmost}, Width={width}")

                if width > 20:
                    center_x = int((leftmost[0] + rightmost[0]) / 2)
                    contourPoints.append((center_x, y))
                    yContourPoints.append(y)
        print('contourPoints')
        print(contourPoints)
        return contourPoints, yContourPoints

    def getBreakPointsOfGroup(sliceContour):
        """
        –ú–µ—Ç–æ–¥ –≥—Ä—É–ø–ø–∏—Ä—É–µ—Ç –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ç–æ—á–∫–∏ —Ä–∞–∑—Ä—ã–≤–∞ –∫–æ—Å—Ç–∏ –∏ –∏—Ö —Ä–∞–¥–∏—É—Å
        :param sliceContour:
        :return: array
        """
        group = []
        for i, b in enumerate(sliceContour):
            if i + 2 >= len(sliceContour):
                break
            res = KernelLinePresenter.getBreakPoints(
                b, sliceContour[i + 1], sliceContour[i + 2])
            group.append([b, sliceContour[i + 1], sliceContour[i + 2], res])
        return group

    # def getMinPointsBreak(group):
    #     """
    #     –ò—â–µ—Ç —Ç–æ—á–∫—É —Ä–∞–∑—Ä—ã–≤–∞ —Å—Ä–µ–¥–∏ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ç–æ—á–µ–∫ —Ä–∞–∑—Ä—ã–≤–∞, —É—á–∏—Ç—ã–≤–∞—è –∏–∑–º–µ–Ω–µ–Ω–∏–µ —É–≥–ª–∞ –Ω–∞–∫–ª–æ–Ω–∞.
    #     –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç [[x,y],[x,y],[x,y], radius]
    #     """
    #     minRadius = float('inf')
    #     minPoint = []
    #     minSlopeChange = float('inf')  # –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∏—Ç–µ—Ä–∏–π –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–∫–ª–æ–Ω–∞

    #     maxAngle = float('-inf')  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É–≥–ª–∞
    #     minAngle = float('inf')

    #     for i, point in enumerate(group):
    #         if i == 0 or i == len(group) - 1:
    #             continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫—Ä–∞–π–Ω–∏–µ —Ç–æ—á–∫–∏

    #         # –£–≥–ª—ã –º–µ–∂–¥—É —Å–æ—Å–µ–¥–Ω–∏–º–∏ —Ç–æ—á–∫–∞–º–∏
    #         slope1 = calculate_slope(group[i-1][1], group[i][1])
    #         slope2 = calculate_slope(group[i][1], group[i+1][1])

    #         slopeChange = abs(slope2 - slope1)  # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —É–≥–ª–∞ –Ω–∞–∫–ª–æ–Ω–∞

    #         if slopeChange < minSlopeChange or point[3] < minRadius:
    #             minRadius = point[3]
    #             minSlopeChange = slopeChange
    #             minPoint = point
    #     print(f"üîπ –ù–∞–∏–±–æ–ª—å—à–∏–π —É–≥–æ–ª: {maxAngle:.2f}¬∞")
    #     print(f"üîπ –ù–∞–∏–º–µ–Ω—å—à–∏–π —É–≥–æ–ª: {minAngle:.2f}¬∞")
    #     return minPoint

    def getMinPointsBreak(group):
        minRadius = float('inf')
        minPoint = []
        minSlopeChange = float('inf')

        maxAngle = float('-inf')  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É–≥–ª–∞
        minAngle = float('inf')   # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —É–≥–ª–∞

        for i in range(1, len(group) - 1):  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é –∏ –ø–æ—Å–ª–µ–¥–Ω—é—é —Ç–æ—á–∫–∏
            slope1 = KernelLinePresenter.calculate_slope(
                group[i-1][1], group[i][1])
            slope2 = KernelLinePresenter.calculate_slope(
                group[i][1], group[i+1][1])

            if slope1 == float('inf') or slope2 == float('inf'):
                continue  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ —É—á–∞—Å—Ç–∫–∏

            slopeChange = abs(slope2 - slope1)
            angle = KernelLinePresenter.calculate_angle_between_lines(
                slope1, slope2)

            # –û–±–Ω–æ–≤–ª—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É–≥–æ–ª
            if angle > maxAngle:
                maxAngle = angle
            if angle < minAngle:
                minAngle = angle

            if slopeChange < minSlopeChange or group[i][3] < minRadius:
                minRadius = group[i][3]
                minSlopeChange = slopeChange
                minPoint = group[i]

        print(f"üîπ –ù–∞–∏–±–æ–ª—å—à–∏–π —É–≥–æ–ª: {maxAngle:.2f}¬∞")
        print(f"üîπ –ù–∞–∏–º–µ–Ω—å—à–∏–π —É–≥–æ–ª: {minAngle:.2f}¬∞")

        return minPoint

    def getBreakPoints(a, b, c):
        """
        –ú–µ—Ç–æ–¥ –ø–æ–ª—É—á–∞–µ—Ç —Ç–æ—á–∫–∏ —Ä–∞–∑—Ä—ã–≤–∞
        :param a:
        :param b:
        :param c:

        :return:
        """
        if a[1] == b[1] == c[1]:  # –µ—Å–ª–∏ –≤—Å–µ —Ç–æ—á–∫–∏ –Ω–∞ –æ–¥–Ω–æ–π –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
            return float('inf')
        if a[1] == b[1]:  # –µ—Å–ª–∏ ab –≤–µ—Ä—Ç–∏–∫–∞–ª.
            b, c = c, b
        elif b[1] == c[1]:  # –µ—Å–ª–∏ bc –≤–µ—Ä—Ç–∏–∫–∞–ª.
            a, b = b, a

        f1 = []  # –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–µ—Ä. –ø–µ—Ä–ø–µ–Ω–¥–∏–∫—É–ª—è—Ä–∞ –∫ ab (y = kx + t)
        f1 += [-1 * (b[0] - a[0]) / (b[1] - a[1])]  # k
        f1 += [(a[1] + b[1]) / 2 - f1[0] * (a[0] + b[0]) / 2]  # t

        f2 = []  # –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–µ—Ä. –ø–µ—Ä–ø–µ–Ω–¥–∏–∫—É–ª—è—Ä–∞ –∫ bc (y = kx + t)
        f2 += [-1 * (c[0] - b[0]) / (c[1] - b[1])]  # k
        f2 += [(c[1] + b[1]) / 2 - f2[0] * (c[0] + b[0]) / 2]  # t

        if f1[0] == f2[0]:  # –≤—Å–µ —Ç–æ—á–∫–∏ –Ω–∞ 1 –ø—Ä—è–º–æ–π
            return float('inf')
        # —Ç–æ—á–∫–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è —Å–µ—Ä. –ø–µ—Ä–ø. (—Ü–µ–Ω—Ç—Ä –æ–ø–∏—Å. –æ–∫—Ä.)
        x = (f2[1] - f1[1]) / (f1[0] - f2[0])
        y = f1[0] * x + f1[1]

        r = ((a[0] - x) ** 2 + (a[1] - y) ** 2) ** 0.5  # –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ä–∞–¥–∏—É—Å–∞
        return r

    def getIncline(point, centralPoint):
        """
            –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∫–ª–æ–Ω –∫–æ—Å—Ç–∏ (False - –ª–µ–≤–æ, True - –ø—Ä–∞–≤–æ )
        :param point:
        :param centralPoint:
        :return:
        """
        if point[0] > centralPoint[0]:
            return False
        else:
            return True

    def getLinePoints(breakPoint, topPoint, bottomPoint, density):
        """
        –ò—â–µ—Ç —Ç–æ—á–∫–∏ –Ω–∞ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π –ª–∏–Ω–∏–∏
        :param breakPoint:
        :param topPoint:
        :param bottomPoint:
        :param density:
        :return: array
        """
        centerPoints = []
        d_x = abs(breakPoint[1][0] - topPoint[0]) / density
        d_y = abs(breakPoint[1][1] - topPoint[1]) / density

        if KernelLinePresenter.getIncline(topPoint, breakPoint[1]):
            for i in range(1, density + 1):
                plt.plot(breakPoint[1][0] - (d_x * i), breakPoint[1][1] -
                         (d_y * i), marker='o', color='cyan', markersize='4')
                centerPoints.append(
                    [breakPoint[1][0] + (d_x * i), breakPoint[1][1] - (d_y * i)])
        else:
            for i in range(1, density + 1):
                plt.plot(breakPoint[1][0] + (d_x * i), breakPoint[1][1] -
                         (d_y * i), marker='o', color='cyan', markersize='4')
                centerPoints.append(
                    [breakPoint[1][0] + (d_x * i), breakPoint[1][1] - (d_y * i)])
        d_x = abs(bottomPoint[0] - breakPoint[1][0]) / density
        d_y = abs(bottomPoint[1] - breakPoint[1][1]) / density
        if KernelLinePresenter.getIncline(bottomPoint, breakPoint[1]):
            for i in range(1, density + 1):
                plt.plot(breakPoint[1][0] - (d_x * i), breakPoint[1][1] +
                         (d_y * i), marker='o', color='cyan', markersize='4')
                centerPoints.append(
                    [breakPoint[1][0] - (d_x * i), breakPoint[1][1] + (d_y * i)])
        else:
            for i in range(1, density + 1):
                plt.plot(breakPoint[1][0] + (d_x * i), breakPoint[1][1] +
                         (d_y * i), marker='o', color='cyan', markersize='4')
                centerPoints.append(
                    [breakPoint[1][0] - (d_x * i), breakPoint[1][1] + (d_y * i)])
        return centerPoints

    # def calculate_slope(point1, point2):
    #     return (point2[1] - point1[1]) / (point2[0] - point1[0])

    def calculate_slope(point1, point2):
        dx = point2[0] - point1[0]
        dy = point2[1] - point1[1]

        if dx == 0:  # –ï—Å–ª–∏ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è
            return float('inf')  # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π –Ω–∞–∫–ª–æ–Ω

        return dy / dx

    def calculate_angle_between_lines(slope1, slope2):
        # –£–≥–æ–ª –º–µ–∂–¥—É –¥–≤—É–º—è –ª–∏–Ω–∏—è–º–∏
        angle_radians = math.atan(
            abs((slope2 - slope1) / (1 + slope1 * slope2)))
        angle_degrees = math.degrees(angle_radians)
        return 180 - angle_degrees

    def prepare_input(points, input_dim=200):
        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ points ‚Äî —ç—Ç–æ —Å–ø–∏—Å–æ–∫ –≤–∏–¥–∞ [[x1, y1], [x2, y2], ...]
        # –ù—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å 100 X-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏ 100 Y-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        num_points = len(points)
        target_points = 100  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (X –∏ Y)

        # –ò–∑–≤–ª–µ–∫–∞–µ–º X –∏ Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        x_coords = [p[0] for p in points]
        y_coords = [p[1] for p in points]

        # –ï—Å–ª–∏ —Ç–æ—á–µ–∫ –±–æ–ª—å—à–µ 100, –æ–±—Ä–µ–∑–∞–µ–º
        if num_points > target_points:
            x_coords = x_coords[:target_points]
            y_coords = y_coords[:target_points]
        # –ï—Å–ª–∏ —Ç–æ—á–µ–∫ –º–µ–Ω—å—à–µ 100, –∑–∞–ø–æ–ª–Ω—è–µ–º –Ω—É–ª—è–º–∏
        elif num_points < target_points:
            x_coords += [0] * (target_points - num_points)
            y_coords += [0] * (target_points - num_points)

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º X –∏ Y –≤ –æ–¥–∏–Ω –º–∞—Å—Å–∏–≤
        # [x1, ..., x100, y1, ..., y100]
        input_array = np.array(x_coords + y_coords)

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º—É (1, 200) –¥–ª—è –ø–æ–¥–∞—á–∏ –≤ –º–æ–¥–µ–ª—å
        input_array = input_array.reshape(1, input_dim)

        return input_array

    def getGolenLine(workingDirectory, imageName):
        # data = image.imread('./BedroImages/bedro 18.jpg')
        # plt.imshow(data)
        # plt.show()
        # return
        plt.switch_backend('Agg')
        points = KernelLinePresenter.getBounds(imageName)
        points = points[0]

        # points_array = np.array(points)
        points_array = KernelLinePresenter.prepare_input(points)

        # topVectorX = points_array[:, 0]
        # topVectorY = points_array[:, 1]
        model = tf.keras.models.load_model(
            "static/neuralModels/golenDots.keras")
        predictions = model.predict(points_array)

        topPoint = [predictions[0][0], predictions[0][1]]
        bottomPoint = [predictions[0][2], predictions[0][3]]

        margin = KernelLinePresenter.getPercentHeight(topPoint, bottomPoint)

        contourPoints, yContourPoints = KernelLinePresenter.getCenterPointsOfContour(
            points, topPoint, bottomPoint, margin)

        print("points")
        print(points)

        print("topPoint")
        print(topPoint)

        print("bottomPoint")
        print(bottomPoint)

        print("margin")
        print(margin)
        sliceCenterContour = contourPoints

        groupOfPoints = KernelLinePresenter.getBreakPointsOfGroup(
            sliceCenterContour)

        breakPoint = KernelLinePresenter.getMinPointsBreak(groupOfPoints)

        plt.plot(breakPoint[1][0], breakPoint[1][1],
                 marker='o', color='green', markersize='4')

        # topPoint, bottomPoint = getMinMaxCenterContourPoints(
        #     contourPoints, yContourPoints)
        linePoints = KernelLinePresenter.getLinePoints(
            breakPoint, topPoint, bottomPoint, 4)

        # data = image.imread(imageName)
        image_path = os.path.join(workingDirectory, "output.jpg")

        if os.path.isfile(image_path):
            data = image.imread(image_path)
        else:
            data = image.imread(imageName)
        x = [topPoint[0], breakPoint[1][0], bottomPoint[0]]
        y = [topPoint[1], breakPoint[1][1], bottomPoint[1]]

        plt.plot(x, y, color="red", linewidth=2)
        plt.imshow(data)
        plt.savefig(image_path, format="jpg")

        # folder_path = f'static/{newName}/predict'
        # files = os.listdir(folder_path)

        # loaded_file = ""
        # done_file = ""
        # for file in files:
        #     newName += f"/predict/{file}"
        # newName = "static/" + newName

        # –†–∞—Å—á–µ—Ç —É–≥–ª–∞ –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏
        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ breakPoint[1] - —ç—Ç–æ —Ç–æ—á–∫–∞ —Ä–∞–∑—Ä—ã–≤–∞, –∞ topPoint –∏ bottomPoint - —Ç–æ—á–∫–∏ –Ω–∞ –ª–∏–Ω–∏—è—Ö
        slope_top = KernelLinePresenter.calculate_slope(
            breakPoint[1], topPoint)
        slope_bottom = KernelLinePresenter.calculate_slope(
            breakPoint[1], bottomPoint)

        angle_between_lines = KernelLinePresenter.calculate_angle_between_lines(
            slope_top, slope_bottom)

        isRazrez = ""
        if (170 < angle_between_lines < 190):
            isRazrez = "–û—Å—Ç–µ–æ—Ç–æ–º–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è"
        else:
            isRazrez = "–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–∞–∑—Ä–µ–∑"

        return image_path, angle_between_lines, isRazrez
